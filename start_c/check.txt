Starting parse
Entering state 0
Reading a token: Next token is token DEF ()
Shifting token DEF ()
Entering state 1
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 6
Reading a token: Next token is token LP ()
Shifting token LP ()
Entering state 21
Reducing stack by rule 4 (line 65):
   $1 = token DEF ()
   $2 = token ID ()
   $3 = token LP ()
        .text
countdown:
        .data
 countdown_RA: .word 0
        .text
 sw $ra,countdown_RA

-> $$ = nterm headstart ()
Stack now 0
Entering state 4
Reading a token: Next token is token RP ()
Shifting token RP ()
Entering state 18
Reading a token: Next token is token COLON ()
Shifting token COLON ()
Entering state 41
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 9
Reading a token: Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 23
Reducing stack by rule 18 (line 84):
   $1 = token ID ()
   $2 = token ASSIGN ()
        .data
        .align 2
countdown_a: .word 0
        .text
-> $$ = nterm headofid ()
Stack now 0 4 18 41
Entering state 70
Reading a token: Next token is token STRING ()
Shifting token STRING ()
Entering state 31
Reducing stack by rule 38 (line 111):
   $1 = token STRING ()
        .data
STR0:   .asciiz "this::"
        .text
la $t0,STR0
-> $$ = nterm factor ()
Stack now 0 4 18 41 70
Entering state 37
Reducing stack by rule 35 (line 107):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 4 18 41 70
Entering state 36
Reading a token: Next token is token ID ()
Reducing stack by rule 32 (line 103):
   $1 = nterm term ()
-> $$ = nterm exp ()
Stack now 0 4 18 41 70
Entering state 35
Next token is token ID ()
Reducing stack by rule 22 (line 91):
   $1 = nterm exp ()
-> $$ = nterm expression ()
Stack now 0 4 18 41 70
Entering state 103
Reducing stack by rule 19 (line 86):
   $1 = nterm headofid ()
   $2 = nterm expression ()
sw $t0,countdown_a

-> $$ = nterm assignment_stmt ()
Stack now 0 4 18 41
Entering state 71
Reducing stack by rule 11 (line 76):
   $1 = nterm assignment_stmt ()
-> $$ = nterm statement ()
Stack now 0 4 18 41
Entering state 69
Reducing stack by rule 10 (line 74):
   $1 = nterm statement ()
-> $$ = nterm statements ()
Stack now 0 4 18 41
Entering state 68
Next token is token ID ()
Shifting token ID ()
Entering state 9
Reading a token: Next token is token ASSIGN ()
Shifting token ASSIGN ()
Entering state 23
Reducing stack by rule 18 (line 84):
   $1 = token ID ()
   $2 = token ASSIGN ()
        .data
        .align 2
countdown_more: .word 0
        .text
-> $$ = nterm headofid ()
Stack now 0 4 18 41 68
Entering state 70
Reading a token: Next token is token STRING ()
Shifting token STRING ()
Entering state 31
Reducing stack by rule 38 (line 111):
   $1 = token STRING ()
        .data
STR1:   .asciiz "string**"
        .text
la $t0,STR1
-> $$ = nterm factor ()
Stack now 0 4 18 41 68 70
Entering state 37
Reducing stack by rule 35 (line 107):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 4 18 41 68 70
Entering state 36
Reading a token: Next token is token PRINT ()
Reducing stack by rule 32 (line 103):
   $1 = nterm term ()
-> $$ = nterm exp ()
Stack now 0 4 18 41 68 70
Entering state 35
Next token is token PRINT ()
Reducing stack by rule 22 (line 91):
   $1 = nterm exp ()
-> $$ = nterm expression ()
Stack now 0 4 18 41 68 70
Entering state 103
Reducing stack by rule 19 (line 86):
   $1 = nterm headofid ()
   $2 = nterm expression ()
sw $t0,countdown_more

-> $$ = nterm assignment_stmt ()
Stack now 0 4 18 41 68
Entering state 71
Reducing stack by rule 11 (line 76):
   $1 = nterm assignment_stmt ()
-> $$ = nterm statement ()
Stack now 0 4 18 41 68
Entering state 102
Reducing stack by rule 9 (line 73):
   $1 = nterm statements ()
   $2 = nterm statement ()
-> $$ = nterm statements ()
Stack now 0 4 18 41
Entering state 68
Next token is token PRINT ()
Shifting token PRINT ()
Entering state 8
Reading a token: Next token is token LP ()
Shifting token LP ()
Entering state 22
Reducing stack by rule 44 (line 118):
   $1 = token PRINT ()
   $2 = token LP ()
-> $$ = nterm print_head ()
Stack now 0 4 18 41 68
Entering state 12
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 32
Reading a token: Next token is token COMMA ()
Reducing stack by rule 39 (line 112):
   $1 = token ID ()
lw $t0, countdown_a
-> $$ = nterm factor ()
Stack now 0 4 18 41 68 12
Entering state 37
Reducing stack by rule 35 (line 107):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 4 18 41 68 12
Entering state 36
Next token is token COMMA ()
Reducing stack by rule 32 (line 103):
   $1 = nterm term ()
-> $$ = nterm exp ()
Stack now 0 4 18 41 68 12
Entering state 35
Next token is token COMMA ()
Reducing stack by rule 22 (line 91):
   $1 = nterm exp ()
-> $$ = nterm expression ()
Stack now 0 4 18 41 68 12
Entering state 33
Reducing stack by rule 56 (line 139):
   $1 = nterm expression ()
li $v0,4
move $a0,$t0
syscall
-> $$ = nterm expression_list ()
Stack now 0 4 18 41 68 12
Entering state 39
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 63
Reducing stack by rule 45 (line 120):
   $1 = token COMMA ()
-> $$ = nterm comma_found ()
Stack now 0 4 18 41 68 12 39
Entering state 64
Reading a token: Next token is token STRING ()
Shifting token STRING ()
Entering state 31
Reducing stack by rule 38 (line 111):
   $1 = token STRING ()
        .data
STR2:   .asciiz " 2 "
        .text
la $t0,STR2
-> $$ = nterm factor ()
Stack now 0 4 18 41 68 12 39 64
Entering state 37
Reducing stack by rule 35 (line 107):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 4 18 41 68 12 39 64
Entering state 36
Reading a token: Next token is token COMMA ()
Reducing stack by rule 32 (line 103):
   $1 = nterm term ()
-> $$ = nterm exp ()
Stack now 0 4 18 41 68 12 39 64
Entering state 35
Next token is token COMMA ()
Reducing stack by rule 22 (line 91):
   $1 = nterm exp ()
-> $$ = nterm expression ()
Stack now 0 4 18 41 68 12 39 64
Entering state 97
Reducing stack by rule 55 (line 138):
   $1 = nterm expression_list ()
   $2 = nterm comma_found ()
   $3 = nterm expression ()
li $v0,4
move $a0,$t1
syscall
-> $$ = nterm expression_list ()
Stack now 0 4 18 41 68 12
Entering state 39
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 63
Reducing stack by rule 45 (line 120):
   $1 = token COMMA ()
-> $$ = nterm comma_found ()
Stack now 0 4 18 41 68 12 39
Entering state 64
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 32
Reading a token: Next token is token RP ()
Reducing stack by rule 39 (line 112):
   $1 = token ID ()
lw $t0, countdown_more
-> $$ = nterm factor ()
Stack now 0 4 18 41 68 12 39 64
Entering state 37
Reducing stack by rule 35 (line 107):
   $1 = nterm factor ()
-> $$ = nterm term ()
Stack now 0 4 18 41 68 12 39 64
Entering state 36
Next token is token RP ()
Reducing stack by rule 32 (line 103):
   $1 = nterm term ()
-> $$ = nterm exp ()
Stack now 0 4 18 41 68 12 39 64
Entering state 35
Next token is token RP ()
Reducing stack by rule 22 (line 91):
   $1 = nterm exp ()
-> $$ = nterm expression ()
Stack now 0 4 18 41 68 12 39 64
Entering state 97
Reducing stack by rule 55 (line 138):
   $1 = nterm expression_list ()
   $2 = nterm comma_found ()
   $3 = nterm expression ()
li $v0,4
move $a0,$t1
syscall
-> $$ = nterm expression_list ()
Stack now 0 4 18 41 68 12
Entering state 39
Next token is token RP ()
Shifting token RP ()
Entering state 62
Reducing stack by rule 46 (line 122):
   $1 = nterm print_head ()
   $2 = nterm expression_list ()
   $3 = token RP ()
-> $$ = nterm print_stmt ()
Stack now 0 4 18 41 68
Entering state 73
Reducing stack by rule 12 (line 77):
   $1 = nterm print_stmt ()
-> $$ = nterm statement ()
Stack now 0 4 18 41 68
Entering state 102
Reducing stack by rule 9 (line 73):
   $1 = nterm statements ()
   $2 = nterm statement ()
-> $$ = nterm statements ()
Stack now 0 4 18 41
Entering state 68
Reading a token: Next token is token ENDDEF ()
Shifting token ENDDEF ()
Entering state 101
Reducing stack by rule 6 (line 68):
   $1 = nterm headstart ()
   $2 = token RP ()
   $3 = token COLON ()
   $4 = nterm statements ()
   $5 = token ENDDEF ()
        lw $t0,countdown_RA
        jr $t0
-> $$ = nterm function ()
Stack now 0
Entering state 5
Reducing stack by rule 3 (line 63):
   $1 = nterm function ()

        .globl main
        .data
        .align 2

main_registers: .space 48
        .text

main:

-> $$ = nterm function_list ()
Stack now 0
Entering state 3
Reading a token: Next token is token ID ()
Shifting token ID ()
Entering state 9
Reading a token: Next token is token LP ()
Shifting token LP ()
Entering state 24
Reading a token: Next token is token RP ()
Shifting token RP ()
Entering state 45
Reducing stack by rule 48 (line 126):
   $1 = token ID ()
   $2 = token LP ()
   $3 = token RP ()
sw $t0, main_registers
sw $t1, main_registers+4
sw $t2, main_registers+8
sw $t3, main_registers+12
sw $t4, main_registers+16
sw $t5, main_registers+20
sw $t6, main_registers+24
sw $a0, main_registers+32
sw $a1, main_registers+36
sw $a2, main_registers+40
sw $a3, main_registers+44
jal countdown
sw $t0, main_registers
sw $t1, main_registers+4
sw $t2, main_registers+8
sw $t3, main_registers+12
sw $t4, main_registers+16
sw $t5, main_registers+20
sw $t6, main_registers+24
sw $a0, main_registers+32
sw $a1, main_registers+36
sw $a2, main_registers+40
sw $a3, main_registers+44
-> $$ = nterm call_stmt ()
Stack now 0 3
Entering state 15
Reducing stack by rule 61 (line 147):
   $1 = nterm call_stmt ()
-> $$ = nterm end ()
Stack now 0 3
Entering state 17
Reducing stack by rule 60 (line 145):
   $1 = nterm end ()
-> $$ = nterm end_list ()
Stack now 0 3
Entering state 16
Reading a token: Now at end of input.
Reducing stack by rule 1 (line 60):
   $1 = nterm function_list ()
   $2 = nterm end_list ()

li $v0,10
syscall
-> $$ = nterm program ()
Stack now 0
Entering state 2
Now at end of input.
Shifting token $end ()
Entering state 7
Stack now 0 2 7
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
Input Passed Checking